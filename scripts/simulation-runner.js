#!/usr/bin/env node

/**
 * Script de Simula√ß√£o OSCE com ElevenLabs Conversational AI
 * 
 * Funcionalidades:
 * - Conecta ao Supabase e busca 5 esta√ß√µes aleat√≥rias
 * - Simula transfer√™ncia entre 5 agentes (Paciente 1-5)
 * - Salva transcri√ß√µes em arquivos individuais
 * - Gera relat√≥rio final de feedback
 * 
 * Uso: node simulation-runner.js
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');

// Configura√ß√µes (substitua pelos seus valores)
const SUPABASE_URL = process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL_HERE';
const SUPABASE_KEY = process.env.SUPABASE_KEY || 'YOUR_SUPABASE_ANON_KEY_HERE';
const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY || 'YOUR_ELEVENLABS_API_KEY_HERE';

// Configura√ß√£o do Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// IDs dos agentes ElevenLabs (substitua pelos seus agentes)
const AGENT_IDS = [
  'agent_patient_1_id',  // Paciente 1
  'agent_patient_2_id',  // Paciente 2
  'agent_patient_3_id',  // Paciente 3
  'agent_patient_4_id',  // Paciente 4
  'agent_patient_5_id',  // Paciente 5
];

// Configura√ß√µes da simula√ß√£o
const SIMULATION_CONFIG = {
  totalStations: 5,
  stationDuration: 10, // minutos
  transferDelay: 2000, // ms entre transfer√™ncias
  outputDir: './simulation-output'
};

/**
 * Classe principal para gerenciar a simula√ß√£o
 */
class SimulationRunner {
  constructor() {
    this.stations = [];
    this.transcriptions = [];
    this.feedback = [];
    this.startTime = new Date();
  }

  /**
   * Cria diret√≥rio de sa√≠da se n√£o existir
   */
  async createOutputDir() {
    try {
      await fs.mkdir(SIMULATION_CONFIG.outputDir, { recursive: true });
      console.log(`üìÅ Diret√≥rio de sa√≠da criado: ${SIMULATION_CONFIG.outputDir}`);
    } catch (error) {
      console.error('‚ùå Erro ao criar diret√≥rio:', error.message);
      throw error;
    }
  }

  /**
   * Busca esta√ß√µes aleat√≥rias do Supabase
   */
  async fetchRandomStations() {
    console.log('üîç Buscando esta√ß√µes aleat√≥rias do Supabase...');
    
    try {
      const { data, error } = await supabase
        .from('stations_with_criteria')
        .select('*')
        .eq('is_active', true)
        .limit(SIMULATION_CONFIG.totalStations);

      if (error) {
        throw new Error(`Erro na query Supabase: ${error.message}`);
      }

      if (!data || data.length === 0) {
        throw new Error('Nenhuma esta√ß√£o ativa encontrada');
      }

      // Embaralha as esta√ß√µes para simular ORDER BY random()
      this.stations = data.sort(() => Math.random() - 0.5).slice(0, SIMULATION_CONFIG.totalStations);
      
      console.log(`‚úÖ ${this.stations.length} esta√ß√µes carregadas`);
      this.stations.forEach((station, index) => {
        console.log(`   ${index + 1}. ${station.name} (${station.specialty})`);
      });

      return this.stations;
    } catch (error) {
      console.error('‚ùå Erro ao buscar esta√ß√µes:', error.message);
      throw error;
    }
  }

  /**
   * Simula intera√ß√£o com agente ElevenLabs
   */
  async interactWithAgent(agentId, station, stationIndex) {
    console.log(`\nüé≠ Iniciando intera√ß√£o com Agente ${stationIndex + 1} (${agentId})`);
    console.log(`üìã Esta√ß√£o: ${station.name}`);
    console.log(`‚è±Ô∏è  Dura√ß√£o: ${SIMULATION_CONFIG.stationDuration} minutos`);

    try {
      // Simula in√≠cio da conversa com o agente
      const conversationStart = {
        timestamp: new Date().toISOString(),
        agentId: agentId,
        station: station.name,
        specialty: station.specialty,
        participantInfo: station.participant_info,
        actorInfo: station.actor_info,
        availableExams: station.available_exams,
        criteria: station.criteria
      };

      // Simula transcri√ß√£o da conversa (em produ√ß√£o, viria da ElevenLabs)
      const transcription = await this.generateMockTranscription(station, stationIndex);
      
      // Simula transfer√™ncia para pr√≥ximo agente
      if (stationIndex < SIMULATION_CONFIG.totalStations - 1) {
        await this.transferToNextAgent(agentId, AGENT_IDS[stationIndex + 1]);
      }

      return {
        ...conversationStart,
        transcription: transcription,
        duration: SIMULATION_CONFIG.stationDuration,
        status: 'completed'
      };

    } catch (error) {
      console.error(`‚ùå Erro na intera√ß√£o com agente ${stationIndex + 1}:`, error.message);
      return {
        agentId: agentId,
        station: station.name,
        error: error.message,
        status: 'failed'
      };
    }
  }

  /**
   * Gera transcri√ß√£o simulada baseada na esta√ß√£o
   */
  async generateMockTranscription(station, stationIndex) {
    const mockConversations = [
      `[${new Date().toISOString()}] M√©dico: Ol√°, como posso ajud√°-lo hoje?\n[${new Date().toISOString()}] Paciente: Tenho sentido uma dor no peito h√° algumas horas...\n[${new Date().toISOString()}] M√©dico: Pode me descrever melhor essa dor?\n[${new Date().toISOString()}] Paciente: √â uma dor opressiva, como se algo estivesse apertando meu peito...`,

      `[${new Date().toISOString()}] M√©dico: Vou realizar um exame f√≠sico completo agora.\n[${new Date().toISOString()}] Paciente: Est√° bem, pode proceder.\n[${new Date().toISOString()}] M√©dico: Vou auscultar seu cora√ß√£o e pulm√µes...\n[${new Date().toISOString()}] Paciente: Sinto falta de ar quando me movimento...`,

      `[${new Date().toISOString()}] M√©dico: Com base nos sintomas, vou solicitar alguns exames.\n[${new Date().toISOString()}] Paciente: Quais exames s√£o necess√°rios?\n[${new Date().toISOString()}] M√©dico: Vou solicitar um ECG de 12 deriva√ß√µes e enzimas card√≠acas...\n[${new Date().toISOString()}] Paciente: Entendi, quando terei os resultados?`,

      `[${new Date().toISOString()}] M√©dico: Vou prescrever algumas medica√ß√µes e orienta√ß√µes.\n[${new Date().toISOString()}] Paciente: Preciso tomar algum cuidado especial?\n[${new Date().toISOString()}] M√©dico: Evite esfor√ßos f√≠sicos e retorne imediatamente se a dor piorar...\n[${new Date().toISOString()}] Paciente: Muito obrigado, doutor.`
    ];

    // Simula delay da conversa
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return mockConversations[stationIndex % mockConversations.length];
  }

  /**
   * Simula transfer√™ncia entre agentes
   */
  async transferToNextAgent(currentAgentId, nextAgentId) {
    console.log(`üîÑ Transferindo de ${currentAgentId} para ${nextAgentId}...`);
    
    try {
      // Simula chamada para ElevenLabs agent_transfer
      const transferPayload = {
        current_agent_id: currentAgentId,
        target_agent_id: nextAgentId,
        transfer_reason: 'station_complete',
        metadata: {
          timestamp: new Date().toISOString(),
          simulation_id: `sim_${Date.now()}`
        }
      };

      // Em produ√ß√£o, faria a chamada real para ElevenLabs
      console.log('üì° Enviando transfer√™ncia para ElevenLabs API...');
      console.log('   Payload:', JSON.stringify(transferPayload, null, 2));
      
      // Simula delay da transfer√™ncia
      await new Promise(resolve => setTimeout(resolve, SIMULATION_CONFIG.transferDelay));
      
      console.log('‚úÖ Transfer√™ncia conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na transfer√™ncia:', error.message);
      throw error;
    }
  }

  /**
   * Salva transcri√ß√£o individual da esta√ß√£o
   */
  async saveStationTranscription(stationData, stationIndex) {
    const filename = `station${stationIndex + 1}.txt`;
    const filepath = path.join(SIMULATION_CONFIG.outputDir, filename);
    
    const content = `ESTA√á√ÉO ${stationIndex + 1} - ${stationData.station}
Especialidade: ${stationData.specialty}
Data: ${stationData.timestamp}
Agente: ${stationData.agentId}
Dura√ß√£o: ${stationData.duration} minutos

INFORMA√á√ïES AO PARTICIPANTE:
${stationData.participantInfo}

INFORMA√á√ïES AO ATOR:
${stationData.actorInfo}

EXAMES DISPON√çVEIS:
${stationData.availableExams}

CRIT√âRIOS DE AVALIA√á√ÉO:
${JSON.stringify(stationData.criteria, null, 2)}

TRANSCRI√á√ÉO DA CONVERSA:
${stationData.transcription}

STATUS: ${stationData.status}
`;

    try {
      await fs.writeFile(filepath, content, 'utf8');
      console.log(`üíæ Transcri√ß√£o salva: ${filename}`);
      return filepath;
    } catch (error) {
      console.error(`‚ùå Erro ao salvar ${filename}:`, error.message);
      throw error;
    }
  }

  /**
   * Gera relat√≥rio final de feedback
   */
  async generateFinalReport() {
    const endTime = new Date();
    const totalDuration = Math.round((endTime - this.startTime) / 1000 / 60); // minutos

    const report = `RELAT√ìRIO FINAL DA SIMULA√á√ÉO OSCE
==========================================

Data de In√≠cio: ${this.startTime.toISOString()}
Data de Conclus√£o: ${endTime.toISOString()}
Dura√ß√£o Total: ${totalDuration} minutos

RESUMO DAS ESTA√á√ïES:
===================
`;

    this.transcriptions.forEach((station, index) => {
      report += `
ESTA√á√ÉO ${index + 1}:
- Nome: ${station.station}
- Especialidade: ${station.specialty}
- Agente: ${station.agentId}
- Status: ${station.status}
- Dura√ß√£o: ${station.duration} minutos
${station.error ? `- Erro: ${station.error}` : ''}
`;
    });

    report += `
ESTAT√çSTICAS:
============
- Total de Esta√ß√µes: ${this.transcriptions.length}
- Esta√ß√µes Conclu√≠das: ${this.transcriptions.filter(s => s.status === 'completed').length}
- Esta√ß√µes com Erro: ${this.transcriptions.filter(s => s.status === 'failed').length}
- Tempo M√©dio por Esta√ß√£o: ${SIMULATION_CONFIG.stationDuration} minutos

FEEDBACK GERAL:
==============
A simula√ß√£o foi executada com sucesso, testando a integra√ß√£o entre:
- Supabase (busca de esta√ß√µes)
- ElevenLabs Conversational AI (transfer√™ncia de agentes)
- Sistema de transcri√ß√£o e feedback

Pr√≥ximos passos:
- Implementar integra√ß√£o real com ElevenLabs API
- Adicionar an√°lise de sentimentos nas transcri√ß√µes
- Implementar sistema de scoring autom√°tico
- Integrar com sistema de feedback da IA

Arquivos Gerados:
================
${this.transcriptions.map((_, index) => `- station${index + 1}.txt`).join('\n')}
- feedback.txt (este arquivo)
`;

    const reportPath = path.join(SIMULATION_CONFIG.outputDir, 'feedback.txt');
    
    try {
      await fs.writeFile(reportPath, report, 'utf8');
      console.log(`üìä Relat√≥rio final salvo: feedback.txt`);
      return reportPath;
    } catch (error) {
      console.error('‚ùå Erro ao salvar relat√≥rio:', error.message);
      throw error;
    }
  }

  /**
   * Executa a simula√ß√£o completa
   */
  async run() {
    console.log('üöÄ Iniciando Simula√ß√£o OSCE com ElevenLabs Conversational AI');
    console.log('============================================================\n');

    try {
      // 1. Criar diret√≥rio de sa√≠da
      await this.createOutputDir();

      // 2. Buscar esta√ß√µes aleat√≥rias
      await this.fetchRandomStations();

      // 3. Executar simula√ß√£o para cada esta√ß√£o
      for (let i = 0; i < this.stations.length; i++) {
        const station = this.stations[i];
        const agentId = AGENT_IDS[i % AGENT_IDS.length];

        console.log(`\nüìç Processando Esta√ß√£o ${i + 1}/${this.stations.length}`);
        console.log('=' .repeat(50));

        // Interagir com o agente
        const stationData = await this.interactWithAgent(agentId, station, i);
        
        // Salvar transcri√ß√£o
        await this.saveStationTranscription(stationData, i);
        
        // Armazenar para relat√≥rio final
        this.transcriptions.push(stationData);

        // Delay entre esta√ß√µes
        if (i < this.stations.length - 1) {
          console.log(`‚è≥ Aguardando ${SIMULATION_CONFIG.transferDelay}ms antes da pr√≥xima esta√ß√£o...`);
          await new Promise(resolve => setTimeout(resolve, SIMULATION_CONFIG.transferDelay));
        }
      }

      // 4. Gerar relat√≥rio final
      await this.generateFinalReport();

      console.log('\nüéâ Simula√ß√£o conclu√≠da com sucesso!');
      console.log(`üìÅ Arquivos salvos em: ${SIMULATION_CONFIG.outputDir}`);

    } catch (error) {
      console.error('\nüí• Erro na simula√ß√£o:', error.message);
      process.exit(1);
    }
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  // Verificar vari√°veis de ambiente
  const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_KEY', 'ELEVENLABS_API_KEY'];
  const missingVars = requiredEnvVars.filter(varName => 
    !process.env[varName] || process.env[varName].includes('YOUR_')
  );

  if (missingVars.length > 0) {
    console.error('‚ùå Vari√°veis de ambiente n√£o configuradas:');
    missingVars.forEach(varName => console.error(`   - ${varName}`));
    console.error('\nüí° Configure as vari√°veis ou edite o script com seus valores.');
    process.exit(1);
  }

  // Executar simula√ß√£o
  const runner = new SimulationRunner();
  await runner.run();
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { SimulationRunner };
